// AUTO GENERATED CODE - DO NOT EDIT
// GENERATED BY ROCKET
// GITHUB: https://github.com/bndrmrtn/rocket
package dist

import (
	"database/sql"

	"encoding/base64"
)

func CreateDBTables(db *sql.DB) error {
	b, err := base64.StdEncoding.DecodeString(`Q1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgYEl0ZW1gICgKCWBpZGAgSU5UKDMyKSBBVVRPX0lOQ1JFTUVOVCBOT1QgTlVMTCwKCVBSSU1BUlkgS0VZIChgaWRgKSwKCWBuYW1lYCBURVhUIE5PVCBOVUxMLAoJYHNsdWdgIFRFWFQgTk9UIE5VTEwsCglgcXVhbnRpdHlgIElOVCg0KSBOT1QgTlVMTAopOwo=`)
	if err != nil {
		return err
	}
	_, err = db.Exec(string(b))
	return err
}

func findOne[M any](db *sql.DB, query string, params []any) (*M, error) {
	var model M

	if err := db.QueryRow(query, params...).Scan(&model); err != nil {
		return nil, err
	}

	return &model, nil
}

func findMany[M any](db *sql.DB, query string, params []any) ([]M, error) {
	rows, err := db.Query(query, params...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var models []M

	for rows.Next() {
		var model M
		if err := rows.Scan(&model); err != nil {
			return nil, err
		}

		models = append(models, model)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}

	return models, nil
}

type Item struct {
	ID int `json:"id"`
	Name string `json:"name"`
	Slug string `json:"slug"`
	Quantity int `json:"quantity"`
}

func FindItems(db *sql.DB, name string) ([]Item, error) {
	rawQuery := `SELECT * FROM Item`
	return findMany[Item](db, rawQuery, []any{})
}

